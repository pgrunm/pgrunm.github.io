<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Engineering Blog</title><link>https://pgrunm.github.io/posts/</link><description>Recent content in Posts on Engineering Blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sat, 15 Jul 2023 10:40:30 +0200</lastBuildDate><atom:link href="https://pgrunm.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Automating Kubernetes operating system updates with Kured, kOps and Flatcar</title><link>https://pgrunm.github.io/posts/kured/</link><pubDate>Sat, 15 Jul 2023 10:40:30 +0200</pubDate><guid>https://pgrunm.github.io/posts/kured/</guid><description>Introduction Link to heading Hello everyone, it&amp;rsquo;s time for a new post.
As you may know, operating system updates are a crucial part of IT security. In cloud environments you may have up to thousands of virtual servers, where no engineer can manually update these servers. So what to do, if you want to automate these operating system updates?
The solution Link to heading Fortunately, there is a great solution to this problem.</description></item><item><title>Kubernetes templating with Carvel ytt</title><link>https://pgrunm.github.io/posts/ytt/</link><pubDate>Sun, 25 Jun 2023 13:35:33 +0200</pubDate><guid>https://pgrunm.github.io/posts/ytt/</guid><description>Introduction Link to heading Hello again, this is another blog post about a great CNCF tool. If you&amp;rsquo;ve ever worked with Kubernetes manifests, you probably know that editing or creating them by hand can be very painful.
On the other side, you as a developer or engineer don&amp;rsquo;t want to edit a lot in these manifests. It is usually better to edit the necessary parts and leave the rest as it was before.</description></item><item><title>Developing Flutter apps with cloud infrastructure: Part 2</title><link>https://pgrunm.github.io/posts/infrastructure_flutter_part2/</link><pubDate>Mon, 21 Jun 2021 23:00:00 +0100</pubDate><guid>https://pgrunm.github.io/posts/infrastructure_flutter_part2/</guid><description>Introduction Link to heading Hello again dear reader. This is the 2nd part of the AWS Flutter development series. The first part covered how to create the required infrastructure in AWS with Terraform. This part will cover how the the required Jenkins containers (master/agent) are set up. Let&amp;rsquo;s dive into it.
Container setups Link to heading Jenkins Master container Link to heading The jenkins master container is the brain of the entire application.</description></item><item><title>Developing Flutter apps with cloud infrastructure: Part 1</title><link>https://pgrunm.github.io/posts/infrastructure_flutter_part1/</link><pubDate>Wed, 21 Apr 2021 21:12:43 +0100</pubDate><guid>https://pgrunm.github.io/posts/infrastructure_flutter_part1/</guid><description>Introduction Link to heading Hello again! It&amp;rsquo;s been a while, because I finally finished my studied and I&amp;rsquo;m now Bachelor of Science :-). Anyway, I wanted to create a blog post of my bachelor thesis and this is going to be the one.
The topic of my thesis was how to speed up development performance when developing Flutter applications with cloud infrastructure. The infrastrcture was completely created with Terraform in AWS.</description></item><item><title>Establishing proxy support for an application without proxy support</title><link>https://pgrunm.github.io/posts/nginx_forward_proxy/</link><pubDate>Tue, 07 Jul 2020 18:45:07 +0100</pubDate><guid>https://pgrunm.github.io/posts/nginx_forward_proxy/</guid><description>Introduction Link to heading Hello again dear reader :-)! Some time passed since my last blog post, because I have been busy with University, but now since exams are done, I have some more time for creating the latest post. Recently I stumbled upon an application that needed internet access but unfortunately didn&amp;rsquo;t support a proxy server yet. At that point of the project we had to find a way to allow this application to communicate directly with the internet, but without having a direct connection to the internet.</description></item><item><title>GPT and MBR: Moving from MBR to GPT</title><link>https://pgrunm.github.io/posts/mbr_and_gpt/</link><pubDate>Sun, 19 Apr 2020 21:45:07 +0100</pubDate><guid>https://pgrunm.github.io/posts/mbr_and_gpt/</guid><description>Intro Link to heading About a year ago I bought a used hard drive from a colleague of mine. This HDD has a size of 3 TiB and is supposed to hold big files like videos, images and some games that are neigher read nor write intensive. Unfortunately I moved from my previous HDD with a Master Boot Record (MBR) and kept using the MBR.
This turned out to be a problem since MBR doesn&amp;rsquo;t support partitions larger than 2 TiB so I could not use all of my 3 TiB drive.</description></item><item><title>Setting up the new Raspberry Pi 4 with Ansible</title><link>https://pgrunm.github.io/posts/raspi4_setup/</link><pubDate>Sat, 28 Mar 2020 18:45:07 +0100</pubDate><guid>https://pgrunm.github.io/posts/raspi4_setup/</guid><description>Since June 2019 the new Raspberry Pi 4 is available to buy. It features much more memory (up to 4 GiB), a Gigabit Ethernet port and two USB 3 ports. So there is a lot of power to compute with, but before we can start playing with it, we have to set it up.
One more thing to say: I don&amp;rsquo;t want to manage my Pi by CLI but with Ansible.</description></item><item><title>Using Prometheus for application metrics</title><link>https://pgrunm.github.io/posts/prometheus_instrumenting/</link><pubDate>Mon, 16 Mar 2020 19:33:10 +0100</pubDate><guid>https://pgrunm.github.io/posts/prometheus_instrumenting/</guid><description>One really important aspect of system and application engineering is monitoring. How do you know if your application, script or system is fine? Google for example uses their own software (called Borgmon) for monitoring. The open source software Prometheus allows to capture time-series data in order to monitor different statistics of an application like Borgmon does. Let&amp;rsquo;s see how we can do this on our own.
The basics of Prometheus Link to heading Some time ago I wrote a small Go application which parses RSS feeds and displays them as a simple html overview with a local webserver.</description></item><item><title>Scaling expriments with different AWS services</title><link>https://pgrunm.github.io/posts/aws_scaling_comparison/</link><pubDate>Wed, 26 Feb 2020 19:33:10 +0100</pubDate><guid>https://pgrunm.github.io/posts/aws_scaling_comparison/</guid><description>As part of my studies I had to write an assigment in the module electronic business. I decided to develop some kind of dummy REST api application where I could try different architectures. The reason for me to try this out was to see how the performance changes over time if you increase the load.
I decided to use Go for this project, because it was designed for scalable cloud architectures and if you compile your code you just get a single binary file which you just have to upload to your machine and execute.</description></item><item><title>Building my new blog: Part 2</title><link>https://pgrunm.github.io/posts/building_blog_part2/</link><pubDate>Thu, 13 Feb 2020 14:31:31 +0100</pubDate><guid>https://pgrunm.github.io/posts/building_blog_part2/</guid><description>In the last post I wrote about my considerations about what software to use for my blog, where to host it and how to set it up. This post contains some more techinical details like the git structure and the deployment process. So then let&amp;rsquo;s dive in.
The git structure Link to heading The hugo projects mentions in their documentation to use a git submodule for the theme. Git explains that you can use this feature to integrate another project into your repository while still getting the latest commits from the other repo.</description></item><item><title>Building my new blog: Part 1</title><link>https://pgrunm.github.io/posts/building_blog_part1/</link><pubDate>Sat, 01 Feb 2020 14:31:31 +0100</pubDate><guid>https://pgrunm.github.io/posts/building_blog_part1/</guid><description>I wanted to create a blog for a long time already, but because of university I had not much spare time. Finally I found some time to create my blog and this post will contain some background information about the software I&amp;rsquo;m using, where it&amp;rsquo;s hosted etc. Enjoy my first post!
What to use Link to heading The first question I asked myself was: What software I&amp;rsquo;m going to use for my blog?</description></item></channel></rss>